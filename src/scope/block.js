//El scope local de bloque es el entorno donde las variables locales √∫nicamente pueden ser accedidas desde un bloque de c√≥digo del programa. Un bloque de c√≥digo es todo aquello que est√° dentro de los caracteres de llaves {}.

function fruits(){
    if (true){
        var fruit1 = 'Apple'; //function scope
        let fruit2 = 'Kiwi';//block scope
        const fruit3 = 'Banana';//block scope
    }
    console.log(fruit1);// Apple
    console.log(fruit2);// ReferenceError: fruit2 is not defined - porque fue declarada con let y se sale del scope de donde fue declarada (el scope es if(...){...})
    console.log(fruit3);//ReferenceError: fruit3 is not defined - porque fue declarada con let y se sale del scope de donde fue declarada (el scope es if(...){...})
}
fruits()

/*

Al intentar llamar fuera del alcance de bloque a las variables declaradas con let o const, tenemos un error, mientras que la variable declarada con var es accedida sin problemas. 
Esto puede ocasionar un error l√≥gico ya que no estamos protegiendo a la variable fruit1 (declarada con var), para que solo sea accedida dentro de su bloque, esta puede ser accedida y alterada por otra funci√≥n y nos puede llevar tiempo encontrar cu√°l es el problema. üò•
.
Los programadores usualmente no somos muy creativos para nombrar variables, por lo que es com√∫n que podamos nombrar en otra funci√≥n una variable llamada fruit1 (pensando que esta solo va a existir en el √°mbito local de la funci√≥n) y all√≠ cometer el error l√≥gico. ü•µ
.
No es recomendable usar var üôÖüèª‚Äç‚ôÇÔ∏è a medida que vayas practicando notar√°s que con let y const tienes m√°s control sobre las variables que declares. üëåüèª

*/

