function alcancia(cantidad){
    let inicial = cantidad;
    return function cantidadDos(segundaCantidad){
        inicial += segundaCantidad;
        return inicial
    }
}

let ahorro = alcancia(5);
console.log(ahorro); // Retorna la funcion 'cantidadDos'
console.log(ahorro(2)); // 7
console.log(ahorro(1)); // 8
console.log(ahorro(5)); // 13
console.log(ahorro(10)); // 23
console.log(ahorro(-20)); // 3

/*
Con esta t√©cnica de Closures ya nos podemos evitar totalmente el uso de la palabra reservada var, ya no necesitamos una variable que sea global para almacenar un valor que vamos a usar/modificar dentro de alguna funci√≥n o bloque, ahora podemos manejar y controlar una variable que solo existe dentro de la funci√≥n que la va a modificar, limitando su alcance podemos evadir errores l√≥gicos ya que si en otra funci√≥n tenemos una variable con el mismo nombre, no afectar√° nuestra l√≥gica y no nos dar√° resultados inesperados, porque literalmente ser√° otra variable, independiente de la que creamos en nuestra primera funci√≥n. üòå
.
¬øY qu√© pasa si yo creo una variable dentro de una funci√≥n y tambi√©n la quiero usar en otra funci√≥n? üò∞
Tranqui‚Ä¶ existe la palabra reservada return que nos ayudar√° a extraer el valor de nuestra variable y colocarla en otro contexto o alcance.

*/  